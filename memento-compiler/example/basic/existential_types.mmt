data Lazy<auto> {
  fn mk_consumer<T, U>(
    consumer: fn (x : U) -> T,
    content: U
  ) -> Lazy<T>,
};


fn force<T>(lazy: Lazy<T>) -> T {
  switch (lazy) {
    case (mk_consumer(consumer, x)) -> consumer(x)
  }
};

fn mk_lazy<T>(content: T) -> Lazy<T> {
  mk_consumer(fn (x) -> x, content)
};

fn map_lazy<T, U>(f: fn (x: T) -> U, lazy: Lazy<T>) -> Lazy<U> {
  switch (lazy) {
    case (mk_consumer(consumer, x)) -> mk_consumer(fn (y) -> f(consumer(y)), x)
  }
};

fn main() -> bool {
  let lazyValue = mk_lazy(42);
  let isLazy42 = map_lazy(fn (x) -> x == 42, lazyValue);
  force(isLazy42)
};
